{% extends "generic_show_form.html.twig" %}
{% import "components/form/fields_macros.html.twig" as fields %}

{% block more_fields %}
    <div class="container bg-white">
        <h2>{{ 'Tickets Zendesk' }}</h2>
        <div class="row g-3 align-items-center p-2">
            <div class="col-3">
                <label for="inputPassword6" class="col-form-label">Selecione o tipo de consulta</label>
               <select class="form-control" id="select-type-zendeskintegration">
                <option>Selecione</option>
                <option value="name">Por Usuário</option>
                <option value="email">Por E-mail</option>
                <option value="name_subject">Por assunto</option>
                <option value="name_description">Por descrição</option>
               </select>
            </div>
            <div class="col-7">
                <label for="inputPassword6" class="col-form-label">Qual a sua pesquisa</label>
                <input type="text" id="keywork-search-zendeskintegration" class="form-control">
            </div>
            <div class="col-2 d-flex block">
                <div class="row">
                    <div class="col-12">
                    <label for="inputPassword6" class="col-form-label">Consultar</label>
                    </div>
                    <a class="btn btn-success" id="btn-search-ticket-zendesk">
                        <i class="fa fa-search"></i>
                    </a>
                </div>


            </div>
        </div>
        <div class="row g-3 align-items-center p-2">
            <p id="context-zendeskintegration-return">

            </p>
            <ul class="list-group" id='ticket-list'>
                <li class="list-group-item" id="return-description"></li>
            </ul>
        </div>


    </div>


    {# Script inline #}
    {% block javascripts %}
    <script>
        $(document).ready(function() {
            if( $('#select-type-zendeskintegration').val() == '' || $('#keywork-search-zendeskintegration').val()){
                alert("Todos os campos são obrigatórios");
            }

            function showToast(title, message, type, position = 'top-0 end-0') {
                const toastId = Date.now(); // ID único baseado no timestamp
                const cssClass = type === 'error' ? 'bg-danger text-white border-0' : 'bg-info text-white border-0';
                const animationClasses = 'animate__animated animate__tada animate__delay-2s animate__slow';
                const html = `<div class='toast-container ${position} p-3'>
                    <div id='toast_js_${toastId}' class='toast ${animationClasses}' role='alert' aria-live='assertive' aria-atomic='true'>
                        <div class='toast-header ${cssClass}'>
                            <strong class='me-auto'>${title}</strong>
                            <button type='button' class='btn-close' data-bs-dismiss='toast' aria-label='${'{{ 'Close' }}'}'></button>
                        </div>
                        <div class='toast-body'>
                            ${message}
                        </div>
                    </div>
                </div>`;
                $('body').append(html);

                const toast = new bootstrap.Toast(document.querySelector('#toast_js_' + toastId), {
                    delay: 5000
                });
                toast.show();
            }


            $('#btn-search-ticket-zendesk').click(function() {
                // Validação dos campos
                var type = $('#select-type-zendeskintegration').val();
                console.log({type})
                var name = $('#keywork-search-zendeskintegration').val().trim();
                var errors = [];

                if (type == 'Selecione') {
                    errors.push('{{ 'O campo Tipo é obrigatório.'  }}');
                    $('#select-type-zendeskintegration').addClass('is-invalid');
                } else {
                    $('#select-type-zendeskintegration').removeClass('is-invalid');
                }

                if (!name) {
                    errors.push('{{ 'O campo Palavra-chave é obrigatório.'  }}');
                    $('#keywork-search-zendeskintegration').addClass('is-invalid');
                } else {
                    $('#keywork-search-zendeskintegration').removeClass('is-invalid');
                }

                if (errors.length > 0) {
                    console.log(errors)
                    // Exibir alerta nativo do GLPI
                    showToast('{{ 'Erro de Validação' }}', errors.join('<br>'), 'error', 'top-0 end-0');
                    {#glpi_toast_error(errors.join('<br>'), '{{ 'Erro de Validação' }}', { position: 'top-0 end-0' });#}
                    return;
                }

                // Enviar requisição AJAX
                var data = {
                    type: type,
                    name: name,
                    action: 'process_ajax'
                };
                $.ajax({
                    url: '../ajax/search-ticket.php',
                    type: 'POST',
                    data: data,
                    dataType: 'json',
                    success: function(response) {
                        console.log('Resposta:', response);
                        $('#return-description').empty();
                        if (response.success && response.data && Array.isArray(response.data)) {
                            response.data.forEach(function(ticket) {
                                $('#return-description').append(
                                    '<li class="list-group-item"> <strong>Assunto: </strong>' +
                                    '<a href="#" target="_blank">' + // Âncora com link para o ticket
                                    (ticket.subject || 'Sem assunto') +
                                    '</a>' +
                                    '<br><strong> Descrição: </strong>'  +
                                    (ticket.description || '{{ 'Sem descrição'  }}').replace(/\\n/g, '<br>') +
                                    '</li>'
                                );
                            });
                            {#displayAjaxMessageAfterRedirect('{{ 'Tickets carregados com sucesso!'  }}', true);#}
                        } else {
                            $('#return-description').html('<li class="list-group-item">{{ 'Erro: '  }}' + (response.message || '{{ 'Nenhum ticket retornado'  }}') + '</li>');
                            {#displayAjaxMessageAfterRedirect('{{ 'Erro: '  }}' + (response.message || '{{ 'Nenhum ticket retornado'  }}'), false);#}
                        }
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        console.log('Erro AJAX:', textStatus, errorThrown);
                        $('#return-description').html('<li class="list-group-item">{{ 'Erro na requisição AJAX: '  }}' + textStatus + '</li>');
                        glpi_toast_error('{{ 'Erro na requisição AJAX: '  }}' + textStatus, false);
                    }
                });
            });

            // Função para exibir mensagens no estilo GLPI
            function displayAjaxMessageAfterRedirect(message, isSuccess) {
                var alertClass = isSuccess ? 'alert-success' : 'alert-danger';
                var alertIcon = isSuccess ? 'fa-check' : 'fa-exclamation-triangle';
                var alertMessage = '<div class="alert ' + alertClass + ' alert-dismissible fade show" role="alert">' +
                    '<i class="fa ' + alertIcon + ' me-2"></i>' +
                    message +
                    '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                    '</div>';

                if ($('#message_after_redirect').length) {
                    $('#message_after_redirect').html(alertMessage);
                } else {
                    $('body').prepend('<div id="message_after_redirect" class="mt-3">' + alertMessage + '</div>');
                }

                setTimeout(function() {
                    $('.alert').alert('close');
                }, 5000);
            }
        });
        // Função para exibir mensagens no estilo GLPI

    </script>
    {% endblock %}
{% endblock %}